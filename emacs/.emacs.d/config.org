*  Settings
** General

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'visual-line-mode)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq inhibit-startup-screen t)
  (setq scroll-conservatively 100)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
  (setq auto-save-default nil)
  (setq ring-bell-function 'ignore)
  (set-frame-font "Iosevka 10" nil t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (global-set-key (kbd "C-x C-<up>") 'shrink-window)
  (global-set-key (kbd "C-x C-<down>") 'enlarge-window)
  (global-set-key (kbd "C-x C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-x C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "<prior>") 'good-scroll-down)
  (global-set-key (kbd "<next>") 'good-scroll-up)
  (global-set-key (kbd "C-S-n") 'good-scroll-up)
  (global-set-key (kbd "C-S-p") 'good-scroll-down)
  (global-set-key (kbd "C-c n r") 'replace-regexp)
  (global-set-key (kbd "C-<tab>") 'tab-recent)
  (global-set-key (kbd "C-S-<tab>") 'tab-next)
  (setq pixel-scroll-precision-large-scroll-height 40.0)
  (pixel-scroll-mode 1)
  (good-scroll-mode 1)
  (setq mouse-wheel-progressive-speed nil)
#+END_SRC

** functions

#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (defun kill-all-other-buffer ()
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

  (defun switch-to-last-buffer ()
    (interactive)
    (switch-to-buffer nil))

  (global-set-key (kbd "C-c b") 'switch-to-last-buffer)
#+end_src


** Melpa
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

** rmsbolt
#+begin_src emacs-lisp
  (use-package rmsbolt)
#+end_src

** good-scroll
#+begin_src emacs-lisp
  (use-package good-scroll)
  (global-set-key (kbd "<prior>") 'good-scroll-down)
  (global-set-key (kbd "<next>") 'good-scroll-up)
  (global-set-key (kbd "C-S-n") 'good-scroll-up)
  (global-set-key (kbd "C-S-p") 'good-scroll-down)
#+end_src
** ewal
#+begin_src emacs-lisp
  (use-package ewal
    :init (setq ewal-use-built-in-always-p nil
		ewal-use-built-in-on-failure-p t))
  (use-package ewal-spacemacs-themes
    :config (progn
	      (load-theme 'ewal-spacemacs-modern t)
	      (enable-theme 'ewal-spacemacs-modern)))
  ;; config-reload command via sway config
#+end_src

** Theme
#+BEGIN_SRC emacs-lisp
;;  (use-package tron-legacy-theme
;;  :config
;;  (load-theme 'tron-legacy t))
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode))
#+END_SRC

** ido mode and buffers

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  (global-set-key (kbd "C-x b") 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
  (setq ibuffer-expert t)
#+END_SRC
** Nov

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind
  ("M-s" . avy-goto-char-2))
#+END_SRC

** switch-window
#+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :config
      (setq aw-background nil)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
    (global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

** ivy
#+BEGIN_SRC emacs-lisp
  (use-package swiper)
  (global-set-key "\C-s" 'swiper)

  (use-package ivy)
  (ivy-mode)
#+END_SRC

** org
#+BEGIN_SRC emacs-lisp
	(use-package org
	  :config
	  (setq org-log-done-with-time nil)
	  (setq org-log-done nil)
	  (setq org-log-repeat nil)
	  (setq org-ellipsis " ▾")
	  (setq org-directory "~/org")
	  (setq org-agenda-files '("roadmap/todo.org" "roadmap/math.org" "roadmap/comp.org" "roadmap/hardware.org" "roadmap/physics.org"))
	  (setq org-refile-targets
		'(("archive.org" :maxlevel . 1)))
	  (advice-add 'org-refile :after 'org-save-all-org-buffers)
	  (setq org-todo-keywords
		'((sequence "TODO(t)" "GOALS(g)" "BOOK(b)" "HABIT(h)" "|" "DONE(d)")))
	(add-to-list 'org-structure-template-alist '("em" . "src emacs-lisp"))
	:bind
	(("C-c a" . org-agenda)
	 ("C-c c" . calendar)))

#+END_SRC

** org journal

#+begin_src emacs-lisp
  (use-package org-journal
    :config
    (setq org-journal-dir "~/org/journal")
    :bind
    (("C-c j o" . org-journal-new-entry)))
#+end_src

** org-bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** elfeed
#+begin_src emacs-lisp
  (use-package elfeed-org)
  (use-package elfeed
  :config
  (setq rmh-elfeed-org-files (list "~/org/elfeed.org")))
  (elfeed-org)
#+end_src

** latex-preview-pane
#+begin_src emacs-lisp
  (use-package latex-preview-pane
  :load-path "~/dotfiles/emacs/latex-preview-pane"
  )
#+end_src

** org roam
#+begin_src emacs-lisp
      (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory "~/org/roam")
      :bind (("C-c n l" . org-roam-buffer-toggle)
	     ("C-c n f" . org-roam-node-find)
	     ("C-c n i" . org-roam-node-insert)
	     ("C-c n o" . org-roam-ui-mode)
	     ("C-c n z" . org-roam-ui-node-zoom)
	     ("C-c n c" . org-id-get-create))
      :config
      (org-roam-setup))
#+end_src

** org roam ui
#+begin_src emacs-lisp
	(use-package org-roam-ui
	  :after org-roam
	  :config
	  (setq org-roam-ui-open-on-start nil
		org-roam-ui-follow t
		org-roam-ui-sync-theme t
		org-roam-ui-update-on-save t))
#+end_src

** calfw

#+begin_src emacs-lisp
  (use-package calfw)
  (use-package calfw-cal)
  (use-package calfw-org)
#+end_src

** org-super-agenda

#+begin_src emacs-lisp
  (use-package org-super-agenda)
  (org-super-agenda-mode)
  (setq org-super-agenda-groups
  	'(
  	  (:name "Morning"
  		 :tag "morning")
  	  (:name "Do Today"
  		 :tag "do_today")
  	  (:name "Study"
  		 :tag "study")
  	  (:name "Night"
  		 :tag "night")
  	  (:name "Emacs"
  		 :tag "emacs")
  	  (:name "Search"
  		 :tag "search_misc")
  	  (:name "Questions"
  		 :tag "search_questions")
  	  (:name "Projects"
  		 :tag "projects")
  	  (:name "comp"
  		 :tag "comp_org")
  	  (:name "math"
  		 :tag "math_org")
  	  (:name "hardware"
  		 :tag "hard_org")
  	  (:name "physics"
  		 :tag "phy_org")
  	  ))
  (setq org-agenda-remove-tags t)
  (setq org-agenda-use-time-grid nil)
#+end_src

** org-download

#+begin_src emacs-lisp
  (use-package org-download)
#+end_src

#+begin_src emacs-lisp
  (org-roam-ui-mode)
  (org-agenda-list)
  (org-agenda-day-view)
  (delete-other-windows)
#+end_src

